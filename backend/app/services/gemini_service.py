import google.generativeai as genai
from app.core.config import GEMINI_API_KEY

# Configure the Gemini API client
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel('gemini-2.5-flash')

def get_sql_query(question: str) -> tuple[str, str]:
    """
    Uses Gemini to generate a SQL query from a natural language question.
    For now, the explanation is static.
    """
    # A detailed prompt that guides the model
    prompt = f"""
    You are an expert SQL generator. Based on the following database table schema and user question,
    generate a syntactically correct SQL query for DuckDB.

    Only output the SQL query and nothing else.

    Table Name: products
    Columns: Index, Name, Description, Brand, Category, Price, Currency, Stock, EAN, Color, Size, Availability, Internal ID

    User Question: {question}

    SQL Query:
    """

    try:
        print("Gemini API'ye istek gönderiliyor...")
        response = model.generate_content(prompt)

        # Clean up the response to get only the SQL
        sql_query = response.text.strip().replace("`", "").replace("sql", "")

        # For now, let's keep the explanation simple
        explanation = "This query was dynamically generated by the Gemini AI model."

        print(f"Oluşturulan SQL: {sql_query}")
        return sql_query, explanation

    except Exception as e:
        print(f"Gemini API çağrısında hata: {e}")
        error_query = "SELECT 'Error calling Gemini API';"
        error_explanation = f"An error occurred: {str(e)}"
        return error_query, error_explanation